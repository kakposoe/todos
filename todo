#!/usr/bin/env php
<?php 

require __DIR__ . '/vendor/autoload.php';
use Todo\Todo;

/* $todos = json_decode(file_get_contents('./todo.json'), true); */

$c = new League\CLImate\CLImate;

// Intro Text

$c->arguments->add( require_once(__DIR__ . '/arguments.php') );
$c->arguments->parse();

if ( !$c->arguments->defined('help') && 
	!$c->arguments->defined('flush') && 
	!$c->arguments->defined('remove') && 
	!$c->arguments->defined('done') && 
	!$c->arguments->defined('new') && 
	!$c->arguments->defined('undo') ) 
{

	if (count($argv) > 1) { // If has any arguements

		if (is_numeric($argv[1])) { // If init called, create file
			Todo::find($argv[1]);
			exit;


		} elseif ($argv[1] === 'init') { // If init called, create file
			
			if (file_exists(getcwd() . '/todo.json')) {
				$c->black()->backgroundRed()->out(' To-do list already in project ');
				exit;
			} else {
				file_put_contents(getcwd() . '/todo.json', []);
				$c->black()->backgroundGreen()->out(' New To-do list created in directory! ');
				exit;
			}
		} elseif ($argv[1] === 'edit') {

			Todo::edit($argv[2], $argv[3]);
			exit;

		} elseif ($argv[1] === 'done') {

			Todo::completed($argv[2]);
			exit;

		} elseif (($argv[1] === 'remove') || ($argv[1] === 'rm')) {

			!empty($argv[2]) ? Todo::remove($argv[2]) : Todo::remove();
			exit;

		} else {

			if($c->arguments->defined('subtask')) {
				Todo::add($argv[1], $c->arguments->get('subtask'));
			} elseif(isset($argv[2]) && $argv[2] === 'and') {
				Todo::addMany($argv);
			} else {
				Todo::add($argv[1]);
			}

		}

	} else {
		if (file_exists(getcwd() . '/todo.json')) { 
			Todo::all();
		} else {
			$c->black()->backgroundRed()->out(' Oops! You haven\'t started a to do list ');
			$c->comment(' Type \'todo init \' to begin... ');
			exit;
		}
	}
	
} else {

}

// Add New Task
if($c->arguments->defined('new')) {

	if($c->arguments->defined('subtask')) {
		Todo::add($c->arguments->defined('new'), $c->arguments->get('subtask'));
	} else {
		Todo::add($c->arguments->defined('new'));
	}
}

// Undo
if($c->arguments->defined('undo')) {

	$i = $c->arguments->get('undo');

	if ((int) $i != $i ) {
		$offset = floor($i) - 1;
		$index = substr($i - $offset, 2) - 1;
		$todos[$offset]['subtasks'][$index]['status'] = false;
	} else {
		$i = intval($i);
		$todos[$i - 1]['status'] = false;
	}

	file_put_contents('./todo.json', json_encode($todos));
	$c->comment('Success: Task now unchecked');
	tasks($todos, $c);

}

// Change status to done
if($c->arguments->defined('done')) {
	Todo::completed($c->arguments->get('done'));
}

// Remove
if($c->arguments->defined('remove')) {
	Todo::remove($c->arguments->get('remove'));
}

// Delete All
if($c->arguments->defined('flush')) {

	$input = $c->black()->backgroundRed()->confirm(' Are you sure you want to delete all ');

	if ($input->confirmed()) {
		file_put_contents('./todo.json', []);
		$c->black()->backgroundGreen(' All Tasks Deleted ');
	}
}

// Help
if($c->arguments->defined('help')) $c->usage();
