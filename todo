#!/usr/bin/env php
<?php 

require './vendor/autoload.php';

$todos = json_decode(file_get_contents('./todo.json'), true);

use Todo\Todo;

$c = new League\CLImate\CLImate;


// Intro Text
$c->br();
$c->black()->backgroundCyan()->out(' To Do List! ');

$c->arguments->add([
    'new' => [
        'prefix'       => 'n',
        'longPrefix'   => 'new',
        'description'  => 'Add a top level task',
    ],

    'subtask' => [
        'prefix'       => 's',
        'longPrefix'   => 'subtask',
        'description'  => 'Add new tasks as subtask to parent tasks',
    ],

    'done' => [
        'prefix'       => 'd',
        'longPrefix'  => 'done',
        'description'  => 'Mark a task as done. Reference a task Number',
		'castTo' => 'float',
    ],
    'undo' => [
        'prefix'       => 'u',
        'longPrefix'  => 'undo',
        'description'  => 'Revert a complete tasks back to uncompleted status',
    ],
    'remove' => [
        'prefix'       => 'r',
        'longPrefix'  => 'remove',
        'description'  => 'Remove a task for your todo list',
    ],
    'flush' => [
        'longPrefix'  => 'delete-all',
        'description'  => 'Delete All Entries',
		'noValue' => true,
    ],
	'help' => [
        'longPrefix'  => 'help',
        'description' => 'Prints a usage statement',
        'noValue'     => true,
    ],
]);

$c->arguments->parse();

if ( !$c->arguments->defined('help') && 
	!$c->arguments->defined('flush') && 
	!$c->arguments->defined('remove') && 
	!$c->arguments->defined('done') && 
	!$c->arguments->defined('new') && 
	!$c->arguments->defined('undo') ) 
{

	$c->br();

	// 'init' - Create new file
	if (count($argv) > 1 && $argv[1] === 'init') {
		if (file_exists(__DIR__ . '/todo.json')) {
			$c->black()->backgroundRed()->out(' To-do list already in project ');
		} else {
			file_put_contents(__DIR__ . '/todo.json', []);
			$c->black()->backgroundGreen()->out(' New To-do list created in directory! ');
		}
		return true;
	}

	if(count($argv) > 1) {
		if($c->arguments->defined('subtask')) {
			Todo::add($argv[1], $c->arguments->get('subtask'));
		} else {
			Todo::add($argv[1]);
		}
	}

	Todo::all();
	
}

// Add New Task
if($c->arguments->defined('new')) {

	if($c->arguments->defined('subtask')) {
		Todo::add($c->arguments->defined('new'), $c->arguments->get('subtask'));
	} else {
		Todo::add($c->arguments->defined('new'));
	}
}

// Undo
if($c->arguments->defined('undo')) {

	$i = $c->arguments->get('undo');

	if ((int) $i != $i ) {
		$offset = floor($i) - 1;
		$index = substr($i - $offset, 2) - 1;
		$todos[$offset]['subtasks'][$index]['status'] = false;
	} else {
		$i = intval($i);
		$todos[$i - 1]['status'] = false;
	}

	file_put_contents('./todo.json', json_encode($todos));
	$c->comment('Success: Task now unchecked');
	tasks($todos, $c);

}

// Change status to done
if($c->arguments->defined('done')) {

	$i = $c->arguments->get('done');

	if ((int) $i != $i ) {

		$offset = floor($i) - 1;
		$index = intval(substr($i - $offset, 2) - 1);
		$todos[$offset]['subtasks'][$index]['status'] = true;

	} else {

		// Check if has children
		if(array_key_exists('subtasks', $todos[$i - 1])) {
			$input = $c->black()->backgroundRed()->confirm(' There are sub tasks, mark all as completed? ');
			if ($input->confirmed()) {
				foreach ($todos[$i - 1]['subtasks'] as &$sub) {
					$sub['status'] = true;
				}
			} 
		}
		
		$todos[intval($i) - 1]['status'] = true;
	}

	file_put_contents('./todo.json', json_encode($todos));
	$c->comment('Task Completed');
	$c->br();
	tasks($todos, $c);

}

// Remove
if($c->arguments->defined('remove')) {
	Todo::remove($c->arguments->get('remove'));
}


// Delete All
if($c->arguments->defined('flush')) {
	file_put_contents('./todo.json', []);
	$c->backgroundGreen(' All Tasks Deleted ');
}

// Help
if($c->arguments->defined('help')) $c->usage();
